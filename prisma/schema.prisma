// prisma/schema.prisma (AICardContent 導入後の完全版)

// --- 基本設定 ---
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  directUrl    = env("DIRECT_URL") // プーリング利用時のマイグレーション用
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// --- Enum 定義 ---
enum StudyRating {
  AGAIN
  HARD
  GOOD
  EASY
}

// ↓↓↓ AIコンテンツの種類を示す Enum を【ここに追加】↓↓↓
enum AiContentType {
  EXPLANATION // 解説
  TRANSLATION // 翻訳
}
// ↑↑↑ 追加ここまで ↑↑↑

// --- モデル定義 ---

// ユーザーモデル (変更なし)
model User {
  id        String     @id @db.Uuid
  email     String?    @unique
  name      String?
  avatarUrl String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  decks     Deck[]
  studyLogs StudyLog[]
}

// デッキモデル (変更なし)
model Deck {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards       Card[]
  @@unique([userId, name])
  @@index([userId])
}

// ↓↓↓ Card モデルを【以下のように修正】↓↓↓
model Card {
  id            String   @id @default(cuid())
  front         String   @db.Text
  back          String   @db.Text
  // --- explanation と translation を【削除】---
  // explanation   String?  @db.Text // <- 削除
  // translation   String?  @db.Text // <- 削除

  // --- 音声URLは残す ---
  frontAudioUrl String?  @db.Text
  backAudioUrl  String?  @db.Text

  // --- SRSメタデータ (変更なし) ---
  interval      Int      @default(0)
  easeFactor    Float    @default(2.5)
  nextReviewAt  DateTime @default(now()) @db.Timestamptz // 型を Timestamptz にするのを推奨

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // --- リレーション (deck, studyLogs は変更なし) ---
  deckId        String
  deck          Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  studyLogs     StudyLog[]

  // ↓↓↓ AICardContent へのリレーションを【追加】↓↓↓
  aiContents    AICardContent[]

  // --- インデックス (変更なし) ---
  @@index([deckId])
  @@index([nextReviewAt])
}
// ↑↑↑ Card モデル修正ここまで ↑↑↑


// ↓↓↓ AICardContent モデルを【ここに追加】↓↓↓
model AICardContent {
  id            String   @id @default(cuid())
  cardId        String   // どのカードのコンテンツか (Cardへの参照)
  card          Card     @relation(fields: [cardId], references: [id], onDelete: Cascade) // Cardとのリレーション
  contentType   AiContentType // Enum: EXPLANATION か TRANSLATION か
  language      String   // コンテンツの言語コード (e.g., 'en', 'ja')
  content       String   @db.Text // 解説や翻訳のテキスト本体

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 同じカードに同じ種類・同じ言語のコンテンツは原則1つ
  @@unique([cardId, contentType, language])
  @@index([cardId]) // カードIDでの検索用
  @@index([cardId, contentType]) // 特定タイプのコンテンツ取得用
}
// ↑↑↑ 追加ここまで ↑↑↑

// 学習ログモデル (変更なし)
model StudyLog {
  id                 String      @id @default(cuid())
  reviewedAt         DateTime    @default(now())
  rating             StudyRating
  previousInterval   Int
  previousEaseFactor Float
  newInterval        Int
  newEaseFactor      Float
  nextReviewAt       DateTime
  userId             String      @db.Uuid
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId             String
  card               Card        @relation(fields: [cardId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([cardId])
  @@index([reviewedAt])
}